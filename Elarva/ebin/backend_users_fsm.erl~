-module(backend_users_fsm).

-behaviour(gen_fsm).

-export([stop/2, receiveMsg/2, start/2, start_link/0, start_link/1, init/1, state_name/3, handle_event/3, handle_sync_event/4, handle_info/3, terminate/3, code_change/4]).

-define(SERVER, ?MODULE).

start_link() ->
	gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []).

start_link(Args) ->
	gen_fsm:start_link(?MODULE, Args, []).

init(State) ->
	{ok, start, State}.

stop(Event, State) ->
	io:format("backend_users_fsm - ~w - received event - ~w - while in state - stop~n", [self(), Event]),
	io:format("FSM reached bad state!!!~n"),
	{next_state, stop, State}.

login(Event, State) ->
	%io:format("backend_users_fsm - ~w - received event - ~w - while in state - receiveMsg~n", [self(), Event]),
	{next_state, login, State}.

start(Event, State) ->
	%io:format("backend_users_fsm - ~w - received event - ~w - while in state - start~n", [self(), Event]),
	case Event of
		{'Login', {doctor_login, Name}} ->
			%io:format("backend_users_fsm - ~w - is in state: receiveMsg~n", [self()]),
			{next_state, login, State};
		_ ->
			%io:format("backend_users_fsm - ~w - is in state: start~n", [self()]),
			{next_state, start, State}
	end.

state_name(_Event, _From, State) ->
	Reply = ok,
	{reply, Reply, start, State}.

handle_event(stop, StateName, State) ->
	{stop, normal, State};
handle_event(_Event, StateName, State) ->
	{next_state, StateName, State}.

handle_sync_event(Event, From, StateName, State) ->
	Reply = ok,
	{reply, Reply, StateName, State}.

handle_info(_Info, StateName, State) ->
	{next_state, StateName, State}.

terminate(_Reason, _StateName, _State) ->
	ok.

code_change(_OldVsn, StateName, State, _Extra) ->
	{ok, StateName, State}.
