-module(backend_tracer).

-export([start_link/0, init_trace/0, trace/0]).

-import(utilities, [initial_call/1]).

start_link() ->
	{ok, init_trace()}.

init_trace() ->
	spawn_link(?MODULE, trace, []).

trace() ->
	erlang:trace(whereis(backend), true, [set_on_spawn, procs, call, 'receive', timestamp]),
	erlang:trace_pattern({patient, requestRecord, 1}, true, [local]),
	trace_loop().

trace_loop() ->
	receive Trace ->
		%io:format("~w~n", [Trace]),
		case Trace of
		{trace_ts, Pid, call, {patient, requestRecord, A}, _} ->
			erlang:element(2, lists:last(ets:lookup(hashTable, {Pid, patient}))) ! {'$gen_event', {'RequestRecord', A}},
			trace_loop();

		{trace_ts, Pid, 'receive', {backend_response, Response}, _} ->
			erlang:element(2, lists:last(ets:lookup(hashTable, {Pid, patient}))) ! {'$gen_event', {'ReceiveResponse', {backend_response, Response}}},
			trace_loop();

		{trace_ts, Pid, exit, _, _} ->
			lists:foreach(fun(FsmPid) ->
				gen_fsm:send_event(lists:last(FsmPid), stop)
			end, ets:match(hashTable, {{Pid, '_'}, '$1'})),
			ets:match_delete(hashTable, {{Pid, '_'}, '_'}),
			trace_loop();

		{trace_ts, _, spawn, Pid, {patient, newPatient, [_]}, _} ->
			ets:insert(hashTable, {{Pid, patient}, erlang:element(2, backend_patient_fsm:start_link(Pid))}),
			io:format("~w~n", [erlang:trace_pattern({patient, requestRecord, 1}, true, [local])]),
			trace_loop();

		_ ->
			trace_loop()
		end
	end.

