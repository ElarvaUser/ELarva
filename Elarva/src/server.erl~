-module(backend).

-behaviour(gen_server).

%% API
-export([start_link/0,
        trigger_request/0,
        trigger_query_offline_doctors/0,
        trigger_doc_response/0,
	trigger_linkPatientToDoc/0,
	trigger_submitPatientRecord/0,
	trigger_login/0,
	trigger_logout/0]).

%% gen_server callbacks
-export([init/1, 
	handle_call/3, 
	handle_cast/2, 
	handle_info/2,
        terminate/2, 
	code_change/3]).

-define(SERVER, ?MODULE).

%%====================================================================
%% API
%%====================================================================
%%--------------------------------------------------------------------
%% Function: start_link() -> {ok,Pid} | ignore | {error,Error}
%% Description: Starts the server
%%--------------------------------------------------------------------
start_link() ->
 gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%--------------------------------------------------------------------
%% Function: trigger_request() -> {ok, trigger_request}
%% Description: Triggers request.
%%--------------------------------------------------------------------
trigger_request() ->
 gen_server:call(?SERVER, trigger_request).

%%--------------------------------------------------------------------
%% Function: trigger_query_offline_doctors() -> {ok, trigger_query_offline_doctors}
%% Description: Triggers query offline doctors.
%%--------------------------------------------------------------------
trigger_query_offline_doctors() ->
 gen_server:call(?SERVER, trigger_query_offline_doctors).

%%--------------------------------------------------------------------
%% Function: trigger_doc_response() -> {ok, trigger_doc_response}
%% Description: Triggers doc response.
%%--------------------------------------------------------------------
trigger_doc_response() ->
 gen_server:call(?SERVER, trigger_doc_response).

%%--------------------------------------------------------------------
%% Function: trigger_linkPatientToDoc() -> {ok, trigger_linkPatientToDoc}
%% Description: Triggers linkPatientToDoc.
%%--------------------------------------------------------------------
trigger_linkPatientToDoc() ->
 gen_server:call(?SERVER, trigger_linkPatientToDoc).

%%--------------------------------------------------------------------
%% Function: trigger_submitPatientRecord() -> {ok, trigger_submitPatientRecord}
%% Description: Triggers submitPatientRecord.
%%--------------------------------------------------------------------
trigger_submitPatientRecord() ->
 gen_server:call(?SERVER, trigger_submitPatientRecord).

%%--------------------------------------------------------------------
%% Function: trigger_login() -> {ok, trigger_login}
%% Description: Triggers login.
%%--------------------------------------------------------------------
trigger_login() ->
 gen_server:call(?SERVER, trigger_login).

%%--------------------------------------------------------------------
%% Function: trigger_logout() -> {ok, trigger_logout}
%% Description: Triggers logout.
%%--------------------------------------------------------------------
trigger_logout() ->
 gen_server:call(?SERVER, trigger_logout).


%%====================================================================
%% gen_server callbacks
%%====================================================================

%%--------------------------------------------------------------------
%% Function: init(Args) -> {ok, State} |
%%                         {ok, State, Timeout} |
%%                         ignore               |
%%                         {stop, Reason}
%% Description: Initiates the server
%%--------------------------------------------------------------------
init(State) ->
 {ok, {[],[],[],[],[]}}.

%%--------------------------------------------------------------------
%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |
%%                                      {reply, Reply, State, Timeout} |
%%                                      {noreply, State} |
%%                                      {noreply, State, Timeout} |
%%                                      {stop, Reason, Reply, State} |
%%                                      {stop, Reason, State}
%% Description: Handling call messages
%%--------------------------------------------------------------------
% 1.
handle_call(trigger_request, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    % receive client request
    PatientName = receiveRequest(), 
    % get patient records				   
    PatientRecord = retrieveRecord(PatientName,PatientRecords), 
    % get the doctors which are responsible for the patient
    PatientDocs = chooseDoctors(PatientName,DoctorPatientLinks), 
    % Query only docs currently online
    OnlinePatientDocs = listIntersection(PatientDocs,DoctorsOnline), 
    % get docs which are currently offline but require permission
    OfflinePatientDocs = PatientDocs -- DoctorsOnline, 
    NewWaitingOfflineDoctorRequests = addToDoctorRequests(PatientRecord,OfflinePatientDocs) ++ WaitingOfflineDoctorRequests,
    % add patient request, together with number of approvals we need to wait for to list of currently open requests
    NewCurrentPatientRequests = [{PatientName,length(PatientDocs)}|CurrentPatientRequests], 
    %if (length(OnlinePatientDocs) == 0) ->                                
	% !!! - This is the induced error - here we are stating that if a patient has no doctors, or none of the doctors are online, send the response                  
	%sendResponse(MonitorManagerPid,PatientName,PatientRecord);     % with the patient record immediately. We then argue that this behaviour is unwanted as specified by the system requirements (make this point clear when discussing the system requirements in documentation) 
	%(1 == 1) ->                                                         
		% else someone is online, send queries to all doctors! 

    % query all the patient's doctors for approval.
    queryDoctors(PatientRecord,OnlinePatientDocs), 
    %end,
    % setup new state
    NewState = {PatientRecords, DoctorPatientLinks, DoctorsOnline, NewCurrentPatientRequests, NewWaitingOfflineDoctorRequests},
    {reply, {ok, trigger_request}, NewState};

% 2.
handle_call(trigger_query_offline_doctors, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    NewWaitingOfflineDoctorRequests = queryDoctorsWhichOnline(WaitingOfflineDoctorRequests, DoctorsOnline),
    % setup new state
    NewState = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, NewWaitingOfflineDoctorRequests},
    {reply, {ok, trigger_query_offline_doctors}, NewState};

% 3.
handle_call(trigger_doc_response, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    % get doctor response
    {DocName,Res,{Patient,Diagnosis}} = getDoctorResponse(),
    % check if request for doctor response present 
    BoolRes = isOpenPatientRequest(Patient,CurrentPatientRequests), 
    if (BoolRes == false) ->% if no such request available, ignore
	main:out("!--- Response to unknown request received - {~w,~w,{~w,~w}}. ~n",[DocName,Res,Patient,Diagnosis]),
	{reply, {ok, trigger_doc_response}, State};

    (1 == 1) -> % else
	if (Res == reject) -> % if request rejected, simply inform user and discard request info
	    % inform patient that request has been denied
	    sendResponse(Patient),
	    % remove info of request, since request has been given response
	    NewRequestList = removePatientRequest(Patient,CurrentPatientRequests), 
	    % remove any possibly pending requests for that patient.
	    NewWaitingOfflineDoctorRequests = removeFromDoctorRequests(Patient,WaitingOfflineDoctorRequests),
	    % setup new state
	    NewState = {PatientRecords, DoctorPatientLinks, DoctorsOnline, NewRequestList, NewWaitingOfflineDoctorRequests},
	    {reply, {ok, trigger_doc_response}, NewState};

   	(1 == 1) -> % else
	    % decrement counter of approved requests
            NewRequestList = decPatientRequestCounter(Patient,CurrentPatientRequests),
	    % get count of positive responses still waiting for 
	    Count = getRequestCounterValue(Patient,NewRequestList), 
	    if (Count == 0) -> % if counter reached zero, can send info
		% send info to patient
	    	sendResponse(Patient,{Patient,Diagnosis}), 
		% remove patient request info, since request satisfied
	    	NewRequestList2 = removePatientRequest(Patient,NewRequestList), 
		% setup new state
	    	NewState = {PatientRecords, DoctorPatientLinks, DoctorsOnline, NewRequestList2, WaitingOfflineDoctorRequests},
		{reply, {ok, trigger_doc_response}, NewState};
		    
	    % if still didnt reach zero, wait for other responses
     	    (1 == 1) -> 
		% setup new state
		NewState = {PatientRecords, DoctorPatientLinks, DoctorsOnline, NewRequestList, WaitingOfflineDoctorRequests},
		{reply, {ok, trigger_doc_response}, NewState}; 
	    end
        end	  
    end;

% 4.
handle_call(trigger_linkPatientToDoc, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    % recieve doctor entry plus linked patient record
    NewEntry = linkPatientToDoctor(), 
    % add new record to current doctor & patient record information
    NewDoctorPatientLinks = [NewEntry|DoctorPatientLinks], 
    % setup new state
    NewState = {PatientRecords, NewDoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    {reply, {ok, trigger_linkPatientToDoc}, NewState}; 

% 5.
handle_call(trigger_submitPatientRecord, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    NewPatientRecord = receivePatientRecord(),
    NewPatientRecordList = [NewPatientRecord] ++ PatientRecords,
    % setup new state
    NewState = {NewPatientRecordList, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    {reply, {ok, trigger_submitPatientRecord}, NewState}; 

% 6.
handle_call(trigger_login, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    receive
	{doctor_login, DocName} -> 
	    % get doctor which logged in
	    Doc = DocName 
    end,
    % build list of currently online doctors
    NewDocsOnline = registerDoctorOnline(Doc,DoctorsOnline),
    % setup new state 
    NewState = {PatientRecords, DoctorPatientLinks, NewDocsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    {reply, {ok, trigger_login}, NewState};

% 7.
handle_call(trigger_logout, _From, State) ->
    State = {PatientRecords, DoctorPatientLinks, DoctorsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    receive
	{doctor_logout, DocName} -> 
	    % get doctor which logged out
	    Doc = DocName 
    end,
    % build list of currently online doctors				 
    NewDocsOnline = registerDoctorOffline(Doc,DoctorsOnline),
    % setup new state 
    NewState = {PatientRecords, DoctorPatientLinks, NewDocsOnline, CurrentPatientRequests, WaitingOfflineDoctorRequests},
    {reply, {ok, trigger_logout}, NewState};

handle_call(_Request, _From, State) ->
 Reply = ok,
 {reply, Reply, State}.

%%--------------------------------------------------------------------
%% Function: handle_cast(Msg, State) -> {noreply, State} |
%%                                      {noreply, State, Timeout} |
%%                                      {stop, Reason, State}
%% Description: Handling cast messages
%%--------------------------------------------------------------------
handle_cast(_Msg, State) ->
 {noreply, State}.

%%--------------------------------------------------------------------
%% Function: handle_info(Info, State) -> {noreply, State} |
%%                                       {noreply, State, Timeout} |
%%                                       {stop, Reason, State}
%% Description: Handling all non call/cast messages
%%--------------------------------------------------------------------
handle_info(_Info, State) ->
 {noreply, State}.

%%--------------------------------------------------------------------
%% Function: terminate(Reason, State) -> void()
%% Description: This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any necessary
%% cleaning up. When it returns, the gen_server terminates with Reason.
%% The return value is ignored.
%%--------------------------------------------------------------------
terminate(_Reason, _State) ->
 ok.

%%--------------------------------------------------------------------
%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}
%% Description: Convert process state when code is changed
%%--------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
 {ok, State}.

%%--------------------------------------------------------------------
%%% Internal functions
%%--------------------------------------------------------------------
timer() ->
	timer:sleep(500), % sleep for 5 seconds
    backend ! trigger_query_offline_doctors, % trigger the backend to recheck if any doctors have now come online
	timer(). % restart loop

%ok
receivePatientRecord() ->
	receive
		{receivePatientRecord,Doc,PatientRecord} -> Doc2 = Doc,Res = PatientRecord
	end,
	Res.

%ok
queryDoctorsWhichOnline(WaitingRequests,[]) -> WaitingRequests;
queryDoctorsWhichOnline([],OnlineDocs) -> [];
queryDoctorsWhichOnline([FirstReq|ReqTail],OnlineDocs) ->
	{Doc,PatientRecord} = FirstReq,
	BoolRes = lists:member(Doc, OnlineDocs),
	if (BoolRes == true) ->
		 queryDoctor(PatientRecord,Doc),
		 queryDoctorsWhichOnline(ReqTail,OnlineDocs);
	   (1 == 1) ->
		 [{Doc,PatientRecord}] ++ queryDoctorsWhichOnline(ReqTail,OnlineDocs)
	end.

%ok
addToDoctorRequests(PatientRecord,[]) -> [];
addToDoctorRequests(PatientRecord,[Head|Tail]) ->
	[{Head,PatientRecord}|addToDoctorRequests(PatientRecord,Tail)].

removeFromDoctorRequests(Patient,[]) -> [];
removeFromDoctorRequests(Patient,[Head|Tail]) ->
	{Doc,{Patient2,_}} = Head,
	if (Patient == Patient2) -> removeFromDoctorRequests(Patient,Tail);
	   (1 == 1) -> [Head|removeFromDoctorRequests(Patient,Tail)]
	end.

%ok
isOpenPatientRequest(Patient,[]) -> false;
isOpenPatientRequest(Patient,[Head|Tail]) ->
	{PatientName,_} = Head,
	if (Patient == PatientName) -> true;
	   (1 == 1) -> isOpenPatientRequest(Patient,Tail)
	end.

%ok
getRequestCounterValue(Patient,[]) -> -1;
getRequestCounterValue(Patient,[Head|Tail]) ->
	{PatientName,Counter} = Head,
	if (Patient == PatientName) -> Counter;
	   (1 == 1) -> getRequestCounterValue(Patient,Tail)
	end.

%ok
removePatientRequest(Patient,[]) -> [];
removePatientRequest(Patient,[Head|Tail]) ->
	{PatientName,_} = Head,
	if (Patient == PatientName) -> Tail;
	   (1 == 1) -> [Head|removePatientRequest(Patient,Tail)]
	end.

%ok
decPatientRequestCounter(Patient,[]) -> [];
decPatientRequestCounter(Patient,[Head|Tail]) ->
	{PatientName,Counter} = Head,
	if (Patient == PatientName) -> [{PatientName,Counter-1}|Tail];
	   (1 == 1) -> [Head|decPatientRequestCounter(Patient,Tail)]
	end.

%ok
linkPatientToDoctor() ->
	receive
	   {linkPatientToDoc,Doc,Patient} -> Res = {Doc,Patient}
	end,
	Res.

%ok
queryDoctor(PatientRecord,DocName) -> DocName ! {receiveRequest,null},
    DocName ! {req,PatientRecord}.

%ok
queryDoctors(PatientRecord,[]) -> ok;
queryDoctors(PatientRecord,[Head|Tail]) -> queryDoctor(PatientRecord,Head),
												 queryDoctors(PatientRecord,Tail).

%ok
receiveRequest() ->
	receive
		{request_record,Name} -> Name % receive request from patient
	end,
	main:delay(1,3), % delay for a few seconds to mirror duration in communication - gives time to monitors to migrate etc...
	Name.

%ok
retrieveRecord(Patient,[]) ->
	{Patient,no_diagnosis};
retrieveRecord(Patient,[Head|Tail]) ->
	{Patient2,Diagnosis} = Head,
	if (Patient == Patient2) -> 
	    {Patient,Diagnosis};
	    (1 == 1) -> retrieveRecord(Patient,Tail)
	end.
	
%ok
registerDoctorOnline(Doc,OnlineDoctors) ->
    [Doc|OnlineDoctors].

%ok
registerDoctorOffline(Doc,[]) ->
	[];
registerDoctorOffline(Doc,[Head|Tail]) ->
	if (Doc == Head) -> 
	    Tail;
	    (1 == 1) -> registerDoctorOffline(Doc,Tail)
	end.

%ok
sendResponse(Patient) -> 
	Patient ! {backend_response,request_denied}.

%ok
sendResponse(Patient,PatientRecord) ->
	Patient ! {backend_response,PatientRecord}.
	%Patient ! {backend_response,{patientX,no_diagnosis}}.
     
linkPatientToDoctor(Patient,Doctor,Diagnosis,DoctorPatientRecords) ->
	[{Doctor,{Patient,Diagnosis}}|DoctorPatientRecords].

%ok
chooseDoctors(Patient,DoctorPatientLink) ->
	extractDocs(Patient,DoctorPatientLink).
	
%ok
getDoctorResponse() ->
	receive
		{doc_response,DocName,Res,PatientRecord} -> DocName2 = DocName,Res2 = Res,PatientRecord2 = PatientRecord
	end,
	{DocName2,Res2,PatientRecord}.



isPatientsDoctor(Patient,Doc,[]) ->
	false;
isPatientsDoctor(Patient,Doc,[Head|Tail]) ->
	{Doc2,{Patient2,_}} = Head,
	if ((Doc2 == Doc) and (Patient2 == Patient)) -> true;
	   (1==1) -> isPatientsDoctor(Patient,Doc,Tail)
	end.


	

%%
%% Local Functions
%%

% ok
listIntersection(List1,List2) ->
	Set1 = sets:from_list(List1),
	Set2 = sets:from_list(List2),
	SetRes = sets:intersection(Set1, Set2),
	sets:to_list(SetRes).

%ok
extractDocs(Patient,[]) -> [];
extractDocs(Patient,[Head|Tail]) ->
	{Doc,Patient2} = Head,
	if (Patient2 == Patient) -> [Doc] ++ extractDocs(Patient,Tail);
	   (1==1) -> extractDocs(Patient,Tail)
	end.

